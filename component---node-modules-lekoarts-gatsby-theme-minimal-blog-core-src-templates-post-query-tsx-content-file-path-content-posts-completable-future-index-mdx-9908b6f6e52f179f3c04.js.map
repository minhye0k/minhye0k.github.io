{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-completable-future-index-mdx-9908b6f6e52f179f3c04.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./content/posts/completable-future/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    hr: \"hr\",\n    h4: \"h4\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Java 에서 I/O Bound 작업을 병렬화 하는 법\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h4, null, \"들어가기에 앞서\"), \"\\n\", React.createElement(_components.p, null, \"미디어 파일에 대한 처리가 필요할 떄가 있다. 예를 들어 동영상의 경우 썸네일을 추출한다거나 여러 화질로 트랜스코딩을 진행해야 한다. 한 번에 여러 개의 동영상에 대한 처리 요구가 들어오게 되면 I/O 작업 때문에 처리 시간이 길어진다. 따라서 이 작업들을 병렬화하여 처리 시간을 줄일 수 있는 Java 의 CompletableFuture 과 적절한 ThreadPool 구성에 대한 개념까지 알아보자.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h4, null, \"Our Goal\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"CompletableFuture 의 기본 개념을 이해하고 응용할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"I/O Bound 작업에 알맞는 Thread Pool 의 구성을 이해하고 설정할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"구현 과정\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h3, null, \"환경\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Spring Boot\"), \"\\n\", React.createElement(_components.li, null, \"FFmpeg\"), \"\\n\", React.createElement(_components.li, null, \"CompletableFuture\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h3, null, \"CompletableFuture 란?\"), \"\\n\", React.createElement(_components.p, null, \"Java8 부터 등장한 비동기 작업을 유연하게 수행할 수 있도록 지원해주는 클래스이다.\\n기존에 존재하던 \", React.createElement(_components.code, null, \"Future\"), \" 의 한계점들을 보완하기 위해 등장했다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"블로킹을 통해서만 이후 결과 처리 가능\"), \"\\n\", React.createElement(_components.li, null, \"여러 비동기 작업 조합 불가능\"), \"\\n\", React.createElement(_components.li, null, \"예외 처리 불가능\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이러한 한계점을 극복한 CopmletableFuture 로 IO Bound 작업을 병렬화하는 과정에 대해 살펴보자.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h3, null, \"FFmpeg 을 통한 동영상 썸네일 추출 작업\"), \"\\n\", React.createElement(_components.p, null, \"IO Bound 작업으로 동영상 썸네일 추출하는 작업을 선택하였다. 도구는 FFmpeg 을 선택하였고 이를 Spring Boot 에서 쉽게 사용할 수 있도록 FFmpeg Wrapper 라이브러리를 적용해주었다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"implementation 'net.bramp.ffmpeg:ffmpeg:0.8.0'\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"FFmpeg 을 통한 썸네일 추출\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"public Supplier<String> extractThumbnail(String videoPath) throws IOException {\\n    ClassPathResource classPathResource = new ClassPathResource(\\\"thumbnails\\\");\\n    final String path = classPathResource.getURI().getPath();\\n\\n    return () -> {\\n        log.info(\\\"starting extracted thumbnail of {}\\\", videoPath);\\n        final String thumbnailFilename = UUID.randomUUID().toString();\\n\\n        FFmpegBuilder fFmpegBuilder = new FFmpegBuilder()\\n                .addInput(videoPath)\\n                .addExtraArgs(\\\"-ss\\\", \\\"00:00:01\\\")\\n                .addOutput(path + \\\"/\\\" + thumbnailFilename + \\\".png\\\")\\n                .setFrames(1)\\n                .done();\\n\\n        fFmpegExecutor.createJob(fFmpegBuilder).run();\\n\\n        return thumbnailFilename;\\n    };\\n}\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h3, null, \"CompletableFuture 를 이용한 병렬화\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"public List<String> extractThumbnailsInParallel(List<String> videos) throws IOException{\\n    List<CompletableFuture<String>> completableFutures = new ArrayList<>();\\n\\n    for (String video : videos) {\\n        CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(extractThumbnail(video), executor)\\n                .exceptionally(\\n                        e -> {\\n                            log.error(\\\"error occurring in extracted thumbnail of {} \\\", video, e);\\n                            return exception;\\n                        }\\n                );\\n        completableFutures.add(completableFuture);\\n    }\\n    final CompletableFuture<List<String>> completableFuture = CompletableFuture.allOf(completableFutures.toArray(new CompletableFuture[0]))\\n            .thenApply(v -> completableFutures.stream()\\n                    .map(CompletableFuture::join)\\n                    .collect(Collectors.toList())\\n            );\\n\\n    return completableFuture.join();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"CompletableFuture\"), \" 를 통해 썸네일 추출 작업을 병렬화 한 코드이다. 필자는 Return Value 가 필요한 상황이기 때문에 \", React.createElement(_components.code, null, \"supplyAsync\"), \" 를 사용하였고, 만약 필요없다면 \", React.createElement(_components.code, null, \"runAsync\"), \" 를 사용해주면 된다.\\n\", React.createElement(_components.code, null, \"CompletableFuture.allOf\"), \" 메서드를 통해 새로운 CompletableFuture 를 생성하고 이를 다시 현재 스레드에 join 하여 Async 로 동작하게 한 작업들이 모두 끝나면 Blocking 으로 결과 값을 받을 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이때 주의할 점은 \", React.createElement(_components.code, null, \"exceptionally\"), \" 나 \", React.createElement(_components.code, null, \"handle\"), \" 메서드를 통해 예외를 제어해주지 않으면 현재 스레드에서 예외가 발생하게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 join 없이 Non-Blocking 으로 구현한다면 현재 스레드에서 예외가 발생하지 않지만 비동기 작업이 정상적으로 이루어지지 않는 것에 대한 대비를 해주어야 하기 때문에 예외 처리를 해주어야 한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"join 과 get 의 차이점\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"join 은 unchecked exception 을 throw 하고 get 은 checked exception 을 throw 한다.\"), \"\\n\", React.createElement(_components.li, null, \"get 은 timeout 을 제어할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"join 은 interrupt 가 불가능하지만 get 은 가능하다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h3, null, \"ForkJoinPool\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"ForkJoinPool\"), \" 은 CompletableFutre 에서 default 로 설정되는 thread pool 이다. 이의 특징은 CPU Bound 연산을 수행할 때 \", React.createElement(_components.strong, null, \"work-stealing 알고리즘\"), \"을 사용하여\\n작업이 밀려있는 다른 thread 의 작업 queue 에서 작업을 가져와 수행하기 때문에 CPU 를 좀 더 효율적으로 사용할 수 있다는 점이다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 이용할 때 중요한 점은 가능한 가장 작은 단위로 작업을 분할할수록 work-stealing 알고리즘이 잘 작동하여 효율이 높아진다는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"필자는 \", React.createElement(_components.strong, null, \"IO Bound 작업\"), \"이고 해당 작업과 서버 환경에서 세밀하게 \", React.createElement(_components.strong, null, \"thread pool 옵션\"), \"들을 설정하기 위해 \", React.createElement(_components.code, null, \"ThreadPoolExecutor\"), \" 로 적용하였다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.h2, null, \"마치며\"), \"\\n\", React.createElement(_components.p, null, \"CompletableFuture 는 본 글에서 소개된 내용 말고도 연산을 여러 단계로 연계하거나 결합할 수 있는 다양한 기능을 가진 메서드들이 많아 유연한 비동기 프로그래밍을 지원한다.\\n참고에 잘 정리된 글에 대한 링크를 남겨두었으니 관심있게 보면 좋을 것 같다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 thread pool 에 대해 짧게 다루어봤는데 좀 더 깊게 알아보고 성능 테스트까지 해보고 싶어 공부하고 정리해서 포스팅 해 볼 것이다.\\n본 포스팅에 사용된 코드는 \", React.createElement(_components.a, {\n    href: \"https://github.com/minhye0k/blog-code/tree/main/asynchronous\"\n  }, \"여기\"), \"에서 확인할 수 있다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"참고\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://11st-tech.github.io/2024/01/04/completablefuture\"\n  }, \"Java CompletableFuture 로 비동기 적용하기\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.baeldung.com/java-fork-join\"\n  }, \"Java fork join\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.baeldung.com/java-completablefuture-join-vs-get\"\n  }, \"https://www.baeldung.com/java-completablefuture-join-vs-get\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://upcurvewave.tistory.com/653\"\n  }, \"Java 병렬 처리 ForkJoinPool 기본 작동 원리\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/minhyeok/Documents/minhye0k.github.io/content/posts/completable-future/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","h2","hr","h4","p","ol","li","ul","h3","code","pre","strong","_provideComponents","components","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}